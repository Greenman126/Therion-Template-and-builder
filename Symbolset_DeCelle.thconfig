encoding  utf-8
##########README########
##
## This file contains Layout Templates and Symbol Modifications
##  Templates - Clean, Working, debugTemplate
##  Symbol modifications can be see by running the files in symbolExample


#### Template Types ####
##
## Clean   - a clean map without survey stations
## Working - shows lineplot and survey stations
## debugTemplate will enable the debug settings, useful for combining scraps

layout cleanTemplate
  copy symbolset
  symbol-hide group centreline
  symbol-hide point station
  symbol-hide line survey
endlayout

layout workingTemplate
  copy symbolset
  symbol-show group centreline
  symbol-show point station
  symbol-show line survey
  
  debug station-names

  code metapost
  %this is added here and not symbolset because then it applies even when turned off
    def l_survey_cave (expr p) =
      pickup PenC;
      draw p withcolor 0.5red;
    enddef;
  endcode
endlayout

layout debugTemplate
  copy symbolset
  
  symbol-show group centreline
  symbol-show point station
  symbol-show line survey
  debug all
  
  code metapost
    def l_survey_cave (expr p) =
    pickup PenC;
    draw p withcolor 0.5green;
   
  enddef;
  endcode
endlayout

##### Optional Map additions #####

layout ColorElevation
    color map-fg altitude
    opacity 40
endlayout

##### Testing #####

layout Final
  copy cleanTemplate
  
  map-image 0 0 nw final_prof.pdf
  #map-image 0 0 nw clean_plan_draft.pdf
endlayout


#####################################################################################
#########################SYMBOLSET MODIFICATIONS#####################################
###############Don't mess with below unless you love metapost########################
#####################################################################################

layout symbolset
symbol-set NSS

symbol-hide line border

symbol-assign point debris AUT
symbol-assign line wall:blocks AUT
symbol-assign line wall:debris AUT
symbol-assign line ceiling-meander UIS
symbol-assign area sand AUT
symbol-assign area pebbles AUT
symbol-assign point pebbles AUT

#Floor detail gray

symbol-color area debris [30 30 30]
symbol-color area clay [30 30 30]
symbol-color area sand [30 30 30]
symbol-color point debris [30 30 30]
symbol-color point clay [30 30 30]
symbol-color point sand [30 30 30]

#Make Remarks Red
symbol-color point remark [100 0 0]

#MAKES WATER BLUE
symbol-color point water-flow [0 30 100]
symbol-color point water-drip [0 30 100]
symbol-color line water-flow [0 30 100]


code metapost  

def a_water (expr Path) =
  T:=identity;
  thfill Path withtransparentcolor (0.7, 0.8, 1)
enddef;

def a_sump (expr Path) =
  T:=identity;
  thfill Path withtransparentcolor (0.6, 0.6, 1)
enddef;

def a_debris (expr p) =
  T:=identity;
  pickup PenC;
  path q, qq; q = bbox p;
  picture tmp_pic;
  uu := max(u, (xpart urcorner q - xpart llcorner q)/100, (ypart urcorner q - ypart llcorner q)/100);
  tmp_pic := image(
    for i = xpart llcorner q step 0.5uu until xpart urcorner q:
      for j = ypart llcorner q step 0.5uu until ypart urcorner q:
        qq := punked (((-.1uu,-.1uu)--(.1uu,-.1uu)--(.1uu,.1uu)--(-.1uu,.1uu)--cycle)
	     randomized (uu/5))
             rotated uniformdeviate(360)
             shifted ((i,j) randomized 1.6uu);
	if xpart (p intersectiontimes qq) < 0:
	  thclean qq;
	  thdraw qq;
	fi;
      endfor;
    endfor;
  );
  clip tmp_pic to p;
  drawoptions();
  draw tmp_pic;
enddef;
  
  def p_continuation(expr pos,theta,sc,al) =
    %Michael Ketzner contribution
    % draw default continuation symbol
    p_continuation_UIS(pos,theta,sc,al);

    % if text attribute is set
    if known(ATTR__text) and picture(ATTR__text):

    % set labeling color to light orange
    push_label_fill_color(1.0, 0.9, 0.8);

    % draw filled label with text next to ?
    p_label.bot(ATTR__text, pos shifted (0,-0.7u), 0.0, 8);

    % restore original labeling color
    %pop_label_fill_color;

    fi;
  enddef;

def p_lowend (expr pos,theta,sc,al)=
	p_label ("TL", pos, theta, 0);
enddef;

def p_claychoke (expr pos,theta,sc,al)=
	p_label ("MF", pos, theta, 0);
enddef;

%%water-drip symbol modified from SBE by Christian DeCelle
picture CTD_water_drip_raw;
CTD_water_drip_raw := image(

	fill (493,1196)..controls (535,1234) and (583,1266)..(635,1290)
		..controls (595,1233) and (566,1160)..(588,1091)
		..controls (622,981) and (733,912)..(757,796)
		..controls (789,684) and (728,556)..(622,509)
		..controls (524,461) and (398,489)..(328,572)
		..controls (278,629) and (259,710)..(272,785)
		..controls (293,942) and (375,1090)..(493,1196)
		--cycle withcolor blue;
	currentpicture := currentpicture shifted (-(llcorner currentpicture)-(urcorner currentpicture - llcorner currentpicture)/2) scaled (u / max((xpart urcorner currentpicture) - (xpart llcorner currentpicture), (ypart urcorner currentpicture) - (ypart llcorner currentpicture)));
);

def p_waterdrip(expr pos, theta, sc, al) =
	T := identity aligned al rotated theta scaled sc shifted pos;
	thdraw CTD_water_drip_raw scaled 0.5;
	thdraw CTD_water_drip_raw scaled 0.15 reflectedabout((0,0), (1,0)) shifted (-1.8,1.3) rotated 50;
	thdraw CTD_water_drip_raw scaled 0.15 shifted (-1.7, -1.4) rotated 130;

enddef;
%%

% modified from l_wall-flowstone_AUT by C. DeCelle

def l_dripline (expr P) =
  T:=identity;
  laenge:= arclength P;
  symsize:=adjust_step(1u,1u);
  circle_width:=symsize/2.5;
  cur:=(symsize-circle_width);
  pickup PenC;
  forever:
    t1 := arctime (cur) of P;
    t2 := arctime (cur + circle_width) of P;
    thdraw (point t1 of P){dir (angle(thdir(P,t1)) + 90)} ..
           {dir (angle(thdir(P,t2)) - 90)}(point t2 of P) ..
           {dir (angle(thdir(P,t1)) + 90)}(point t1 of P);
    thfill (point t1 of P){dir (angle(thdir(P,t1)) + 90)} ..
           {dir (angle(thdir(P,t2)) - 90)}(point t2 of P) ..
           {dir (angle(thdir(P,t1)) + 90)}(point t1 of P) --
           (point t1 of P)--cycle;
    cur := cur + symsize + 0.3u;
    exitif cur > laenge + (symsize / 3); % for rounding errors
  endfor;
  pickup PenA;
  %thdraw P;
enddef;

%by C. DeCelle
def p_moonmilk (expr pos,theta,sc,al) =
   U:=(u, u);
    T:=identity aligned al rotated theta scaled sc shifted pos;
    pickup PenC;
    % Define the outer and inner arcs of the crescent moon
    path outer_arc, inner_arc;
    outer_arc := halfcircle scaled 6sc rotated 100;
    inner_arc := halfcircle scaled (6sc * 0.6) xscaled 1.5 rotated (100 + theta);
    
  % Create the crescent moon shape by subtracting the inner arc from the outer arc
    p:=outer_arc -- reverse inner_arc -- cycle;
    thdraw p;
    thfill p;
    thdraw p shifted (0.2u, -0.3u) scaled 0.3;

enddef;

% originally by Philip Schuchardt
def p_gradient (expr pos,theta,sc,al) =
  U:=(.4u, .6u);
  T:=identity aligned al rotated theta scaled sc shifted pos;
  pickup PenC;

  thdraw (-.2u, -.4u) -- (-.4u, .2u);
  thdraw (0u, -.3u) -- (0u, .6u);
  thdraw (.2u, -.4u) -- (.4u, .2u);
enddef;

p_label_mode_height:=6;

def p_narrowend (expr pos,theta,sc,al)=
	p_label ("TT", pos, theta, 0);
enddef;

def p_anchor (expr pos,theta,sc,al)=
  p_label ("X", pos, theta, 0);
enddef;

%bristol's symbol. Based on gypsum flower code.
def p_airdraught (expr pos,theta,sc,al)=
    U:=(.25u,u);
    T:=identity aligned al rotated theta scaled sc shifted pos;
    pickup PenC;
    thdraw (.18u,0){left}..(0,.15u)..(.2u,.3u)..(.4u,0)..
        (.15u,-.28u)..(-.25u,0)..{dir 100}(0,.8u)..(0,u);

    p:=(-.2u,.65u){dir 20}..{dir 90}(0,u);
    thdraw p;
    thdraw p reflectedabout (origin,(0,u));
enddef;

def p_mud(expr pos,theta,sc,al) =
    U:=(.2u, .7u);
    T:=identity aligned al rotated theta scaled sc shifted pos;
    pickup PenC;
    thdraw (-.7u, .2u) -- (-.2u, .2u);
    thdraw (-.3u, -.2u) -- (.3u, -.2u);
    thdraw (.2u, .2u) -- (.7u, .2u);
enddef;

let l_ceilingstep = l_ceilingstep_UIS;
let l_chimney = l_ceilingstep_UIS;

%fixing the low-ceiling tick direction
def l_lowceiling(expr P) =
	begingroup
		path SBE_T;

		T := identity;

		cursor := 0;
		totalLength := arclength P;
		elementSize := adjust_step(totalLength, 0.5u); % symbol length nudged to be multiple of path length
		SBE_T := (0,0) -- (0,-0.1u);
		pickup PenD;
		forever:
			t1 := arctime (cursor + elementSize * 1/7) of P;
			t2 := arctime (cursor + elementSize * 3/7) of P;
			t3 := arctime (cursor + elementSize * 4/7) of P;
			t4 := arctime (cursor + elementSize * 6/7) of P;

			thdraw (subpath (t1,t4) of P);
			thdraw SBE_T rotated (angle(thdir(P,t2))) shifted (point t2 of P);
			thdraw SBE_T rotated (angle(thdir(P,t3))) shifted (point t3 of P);

			cursor := cursor + elementSize;
			exitif cursor > totalLength - (elementSize / 2);
		endfor;
	endgroup;
enddef;

%def l_rockborder (expr P) =
%  T:=identity;
%  pickup PenC;
%  if cycle P: thclean P fi;
%  thfill P withcolor (100, 100, 100);  
%  thdraw P;
%enddef;

% modified from l_wall-flowstone_AUT
%by Christian DeCelle
def l_dripline (expr P) =
  T:=identity;
  laenge:= arclength P;
  symsize:=adjust_step(1u,1u);
  circle_width:=symsize/2.5;
  cur:=(symsize-circle_width);
  pickup PenC;
  forever:
    t1 := arctime (cur) of P;
    t2 := arctime (cur + circle_width) of P;
    thdraw (point t1 of P){dir (angle(thdir(P,t1)) + 90)} ..
           {dir (angle(thdir(P,t2)) - 90)}(point t2 of P) ..
           {dir (angle(thdir(P,t1)) + 90)}(point t1 of P);
    thfill (point t1 of P){dir (angle(thdir(P,t1)) + 90)} ..
           {dir (angle(thdir(P,t2)) - 90)}(point t2 of P) ..
           {dir (angle(thdir(P,t1)) + 90)}(point t1 of P) --
           (point t1 of P)--cycle;
    cur := cur + symsize + 0.3u;
    exitif cur > laenge + (symsize / 3); % for rounding errors
  endfor;
  pickup PenA;
  %thdraw P;
enddef;


def p_u_blocks (expr pos, theta, sc, al) =
U:=(1u,1u);
T:=identity aligned al rotated theta scaled (1.5*sc) shifted pos;
pickup PenC;
%linecap := butt;
%linejoin := mitered;
thdraw (-0.10u,0.57u)..controls (-0.23u,0.58u) and (-0.23u,0.58u)..(-0.28u,0.53u)
	..controls (-0.32u,0.49u) and (-0.45u,0.36u)..(-0.43u,0.28u)
	..controls (-0.41u,0.19u) and (-0.30u,0.06u)..(-0.23u,0.06u)
	..controls (-0.15u,0.05u) and (0.09u,0.02u)..(0.14u,0.02u)
	..controls (0.18u,0.02u) and (0.33u,0.03u)..(0.37u,0.12u)
	..controls (0.41u,0.19u) and (0.43u,0.17u)..(0.44u,0.25u)
	..controls (0.46u,0.33u) and (0.44u,0.38u)..(0.32u,0.48u)
	..controls (0.19u,0.57u) and (0.13u,0.58u)..(0.08u,0.58u)
	..controls (0.03u,0.59u) and (-0.10u,0.58u)..(-0.10u,0.58u)
	--cycle;
thdraw (-0.43u,0.28u)..controls (-0.43u,0.28u) and (-0.42u,0.32u)..(-0.41u,0.33u)
	..controls (-0.39u,0.35u) and (-0.35u,0.41u)..(-0.33u,0.41u)
	..controls (-0.30u,0.42u) and (-0.25u,0.50u)..(-0.21u,0.50u)
	..controls (-0.19u,0.50u) and (-0.12u,0.51u)..(-0.08u,0.51u)
	..controls (-0.05u,0.52u) and (0.02u,0.52u)..(0.05u,0.51u)
	..controls (0.07u,0.51u) and (0.17u,0.51u)..(0.20u,0.48u)
	..controls (0.23u,0.46u) and (0.32u,0.40u)..(0.34u,0.38u)
	..controls (0.36u,0.37u) and (0.41u,0.32u)..(0.42u,0.31u)
	..controls (0.43u,0.30u) and (0.44u,0.25u)..(0.44u,0.25u);
thdraw (0.02u,0.03u)..controls (0.02u,0.03u) and (-0.00u,0.02u)..(-0.03u,-0.00u)
	..controls (-0.05u,-0.03u) and (-0.05u,-0.06u)..(-0.05u,-0.11u)
	..controls (-0.04u,-0.16u) and (0.03u,-0.18u)..(0.10u,-0.20u)
	..controls (0.17u,-0.22u) and (0.35u,-0.22u)..(0.41u,-0.22u)
	..controls (0.47u,-0.22u) and (0.71u,-0.15u)..(0.72u,-0.14u)
	..controls (0.73u,-0.13u) and (0.73u,-0.07u)..(0.72u,-0.03u)
	..controls (0.71u,0.01u) and (0.70u,0.09u)..(0.66u,0.10u)
	..controls (0.62u,0.11u) and (0.60u,0.14u)..(0.56u,0.15u)
	..controls (0.53u,0.16u) and (0.48u,0.17u)..(0.46u,0.17u)
	..controls (0.43u,0.18u) and (0.42u,0.18u)..(0.42u,0.18u);
thdraw (0.72u,-0.14u)..controls (0.72u,-0.14u) and (0.71u,-0.11u)..(0.71u,-0.08u)
	..controls (0.70u,-0.05u) and (0.69u,-0.02u)..(0.69u,0.00u)
	..controls (0.68u,0.02u) and (0.68u,0.05u)..(0.66u,0.06u)
	..controls (0.64u,0.07u) and (0.61u,0.08u)..(0.59u,0.09u)
	..controls (0.57u,0.10u) and (0.55u,0.11u)..(0.51u,0.11u)
	..controls (0.47u,0.12u) and (0.44u,0.13u)..(0.42u,0.13u)
	..controls (0.41u,0.13u) and (0.37u,0.12u)..(0.37u,0.12u);
thdraw (0.00u,-0.17u)..controls (0.00u,-0.17u) and (-0.00u,-0.17u)..(-0.07u,-0.18u)
	..controls (-0.14u,-0.19u) and (-0.19u,-0.18u)..(-0.24u,-0.17u)
	..controls (-0.28u,-0.15u) and (-0.38u,-0.16u)..(-0.41u,-0.09u)
	..controls (-0.43u,-0.03u) and (-0.44u,0.00u)..(-0.43u,0.03u)
	..controls (-0.42u,0.06u) and (-0.43u,0.09u)..(-0.41u,0.11u)
	..controls (-0.40u,0.13u) and (-0.37u,0.15u)..(-0.37u,0.15u);
enddef;

initsymbol ("p_u_blocks");

let p_blocks = p_u_blocks;

def l_wall_pit (expr P) =
  T:=identity;
  cas := 0;
  dlzka := arclength P;
  mojkrok:=adjust_step(dlzka, 0.25u);
  pickup PenC;
  forever:
    t := arctime cas of P;
    mark_ (P,t,0.2u);
    cas := cas + mojkrok;
    exitif cas > dlzka + (mojkrok / 3); % for rounding errors
  endfor;
  pickup PenA;
  thdraw P;
enddef;

def l_wall_chimney (expr P) =
  T:=identity;
  cas := 0;
  dlzka := arclength P;
  mojkrok:=adjust_step(dlzka, 0.75u);
  pickup PenC;
  forever:
    % we don't want to draw marks on either end, since usually that'll be at a wall or ceilingstep
    cas := cas + mojkrok;
    exitif cas > dlzka + (mojkrok / 3); % for rounding errors
    t := arctime cas of P;
    mark_ (P,t,-0.2u);
  endfor;
  pickup PenA;
  thdraw P;
enddef;

def l_pitchimney (expr P) = % this is the nss ceiling step with a second tick)
  T:=identity;
  cas := 0;                            % cursor to step along path
  dlzka := arclength P;
  mojkrok:=adjust_step(dlzka, 0.8u);   % symbol length nudged to be multiple of path length
  pickup PenC;
  forever:
    t1 := arctime (cas + mojkrok*1/5) of P;
    t  := arctime (cas + mojkrok/2) of P;
    t2 := arctime (cas + mojkrok*4/5) of P;
    thdraw (subpath (t1,t2) of P);
    mark_ (P,t,-0.2u);                  % change sign to -0.2u
    mark_ (P,t,0.2u);
    cas := cas + mojkrok;
    exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
  endfor;
enddef;

% this is slightly modified pit_UIS
% should never have tick at end.
def l_floormeander (expr P) = 
  T:=identity;
  dlzka := arclength P;
  mojkrok:=adjust_step(dlzka, 0.25u);
  cas := mojkrok; %start 1 step along
  pickup PenD;
  forever:
    t := arctime cas of P;
    mark_ (P,t,0.1u);
    mark_ (P,t,-0.1u);
    cas := cas + mojkrok;
    exitif cas > dlzka - (mojkrok/3); % for rounding errors
  endfor;
  pickup PenC;
  thdraw P;
enddef;

% this should be redone at a higher density, but for now this will do.
let l_ceilingmeander = l_pitchimney_NSS;

%created by Christian DeCelle
def p_moonmilk (expr pos,theta,sc,al) =
   U:=(u, u);
    T:=identity aligned al rotated theta scaled sc shifted pos;
    pickup PenC;
    % Define the outer and inner arcs of the crescent moon
    path outer_arc, inner_arc;
    outer_arc := halfcircle scaled 6sc rotated 100;
    inner_arc := halfcircle scaled (6sc * 0.6) xscaled 1.5 rotated (100 + theta);
    
  % Create the crescent moon shape by subtracting the inner arc from the outer arc
    p:=outer_arc -- reverse inner_arc -- cycle;
    thdraw p;
    thfill p;
    thdraw p shifted (0.2u, -0.3u) scaled 0.3;
enddef;


def l_wall_clay (expr P) =
  T:=identity;
  cas := 0;
  dlzka := arclength P;
  mojkrok:=adjust_step(dlzka, .5u);
  pickup PenC;
  picture mud_NSS;
  mud_NSS := image(
	   draw (-.5u, .2u) -- (-.1u, .2u);
    draw (-.15u, -.2u) -- (.15u, -.2u);
    );
  forever:
    t := arctime (cas + mojkrok/2) of P;
    thdraw mud_NSS scaled .5 shifted (point t of P + .5u * unitvector(thdir(P,t) rotated -90 randomized .2u));
    cas := cas + mojkrok;
    exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
  endfor;
  pickup PenA;
  thdraw P;
enddef;

let l_wall_unsurveyed = l_wall_presumed_UIS;

%def l_wall_underlying (expr P) =
%  thdrawoptions(dashed withdots withpen PenA);
%  thdraw P;
%  thdrawoptions();
%enddef;

def l_slope (expr P,S)(text Q) =
%show Q;
  T:=identity;
  numeric dirs[];
  numeric lengths[];
  for i=Q:
    dirs[redpart i]:=greenpart i;
    lengths[redpart i]:=bluepart i;
  endfor;

  li:=length(P); % last

  alw_perpendicular:=true;

  for i=0 upto li:
    if unknown dirs[i]: dirs[i]:=-1;
    else:
      if dirs[i]>-1:
        dirs[i]:=((90-dirs[i]) - angle(thdir(P,i))) mod 360;
        alw_perpendicular:=false;
      fi;
    fi;
    if unknown lengths[i]: lengths[i]:=-1; fi;
  endfor;

%for i=0 upto li: show dirs[i]; endfor;

  ni:=0; % next
  pi:=0; % previous

  for i=0 upto li:
    d:=dirs[i];
    if d=-1:
      if (i=0) or (i=li):
        dirs[i] := angle(thdir(P,i) rotated 90) mod 360;
	pi:=i;
      else:
        if ni<=i:
	  for j=i upto li:
            ni:=j;
	    exitif dirs[j]>-1;
	  endfor;
	fi;
	w:=arclength(subpath(pi,i) of P) /
	   arclength(subpath(pi,ni) of P);
	dirs[i]:=w[dirs[pi],dirs[ni]];
%        if (dirs[i]-angle(thdir(P,i))) mod 360>180:
%          dirs[i]:=w[dirs[ni],dirs[pi]];
%	  message("*******");
%        fi;
     fi;
    else:
      pi:=i;
    fi;
  endfor;

%for i=0 upto li: show dirs[i]; endfor;

  ni:=0; % next
  pi:=0; % previous

  for i=0 upto li:
    l:=lengths[i];
    if l=-1:
      if (i=0) or (i=li):
        lengths[i] := 1cm; % should never happen!
	thwarning("slope width at the end point not specified");
	pi:=i;
      else:
        if ni<=i:
	  for j=i+1 upto li:
            ni:=j;
	    exitif lengths[j]>-1;
	  endfor;
	fi;
	w:=arclength(subpath(pi,i) of P) /
	   arclength(subpath(pi,ni) of P);
	lengths[i]:=w[lengths[pi],lengths[ni]];
	pi:=i;
      fi;
    else:
      pi:=i;
    fi;
  endfor;

% for i=0 upto li: show lengths[i]; endfor;

  T:=identity;
  boolean par;
  offset:=0;
  dlzka := (arclength P);
  if dlzka>3u:
    offset := 0.3u;
  elseif dlzka>u:
    offset := 0.1u;
  fi;
  dlzka:=dlzka-2offset;
  cas := offset;
  mojkrok:=adjust_step(dlzka,1.4u) / 2;
  pickup PenC;
  par := false;
  forever:
    t := arctime cas of P;
    if t mod 1>0:  % not a key point
      w := (arclength(subpath(floor t,t) of P) /
            arclength(subpath(floor t,ceiling t) of P));
      if alw_perpendicular:
        a := 90;
      else:
        a := w[dirs[floor t],dirs[ceiling t]];
      fi;
      l := w[lengths[floor t],lengths[ceiling t]];
    else:
      if alw_perpendicular:
        a := 90;
      else:
        a:= dirs[t];
      fi;
      l:=lengths[t];
    fi;

    a := a + angle(thdir(P,t));

    if par:
      thdraw (point t of P) + mojkrok/3 * unitvector(dir(a-90))--
        ((point t of P) + l * .8 * unitvector(dir(a-50)));

      thdraw
        (point t of P) + mojkrok/3 * unitvector(dir(a+90)) --
        ((point t of P) + l *.8 * unitvector(dir(a+50)));

      thdraw (point t of P) + .1 * l * unitvector(dir(a)) -- ((point t of P) + 
        l * unitvector(dir(a)));
    fi;

    cas := cas + mojkrok;
    par := not par;
    exitif cas > dlzka + offset + 0.1mm;  % for rounding errors
  endfor;
%pickup pencircle scaled 3pt;
%for i=0 upto li: draw point i of P; endfor;
enddef;
;

initsymbol("l_u_red");
def l_u_red(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (1, 0, 0);
enddef;

initsymbol("l_u_brown");
def l_u_brown(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (0.6, 0.4, 0.2);
enddef;

initsymbol("l_u_black");
def l_u_black(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (0, 0, 0);
enddef;

initsymbol("l_u_white");
def l_u_white(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (1, 1, 1);
enddef;

initsymbol("l_u_user");
def l_u_user(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (0.5, 0.5, 0.5);
enddef;

initsymbol("l_u_purple");
def l_u_purple(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (0.4, 0.0, 0.8);
enddef;

initsymbol("l_u_green");
def l_u_green(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (0.0, 1, 0);
enddef;

initsymbol("l_u_blue");
def l_u_blue(expr P) =
  T:=identity;
  pickup PenC;
  thdraw P withcolor (0, 0.8, 1);
enddef;

 def s_northarrow (expr rot) =
    T:=identity;
    picture tmp_pic;
    tmp_pic = image (
      begingroup
        interim defaultscale:=3;
        label.top("N", origin shifted (0,2.2cm));
      endgroup;
      thdraw (-.4cm,.4cm)--(0,2cm)--(.4cm,.4cm)--(2cm,0cm)--(.4cm,-.4cm)--(0,-2cm)--(-.4cm,-.4cm)--(-2cm,0)--cycle;
      thfill (-.4cm,.4cm)--(0,2cm)--(0,0)--cycle;
      thfill (.4cm,-.4cm)--(0,-2cm)--(0,0)--cycle;
      thfill (.4cm,.4cm)--(2cm,0)--(0,0)--cycle;
      thfill (-.4cm,-.4cm)--(-2cm,0)--(0,0)--cycle;
    );
    draw tmp_pic scaled 0.5 rotatedaround(origin, -rot);
  enddef;

  def s_northarrow_k (expr rot) =
     T:=identity;
     picture tmp_pic;
     tmp_pic = image (
       begingroup
         interim defaultscale:=3;
         label.top("*", origin shifted (0,3.1cm));
       endgroup;
       thdraw (0,0)--(0,3cm);
     );
     pickup PenA;
     draw tmp_pic scaled 0.5 rotatedaround(origin, -rot);
     draw tmp_pic scaled 0.35 rotatedaround(origin, -(rot-8.1));   
  enddef;

  def s_scalebar (expr l, units, txt) =
    begingroup
      interim warningcheck:=0;
      tmpl:=l / Scale * cm * units / 2;
      tmpx:=l / Scale * cm * units / 5;
      tmph:=5bp; % bar height
    endgroup;
    pickup PenC;
    draw (-tmpl,0)--(tmpl,0)--(tmpl,-tmph)--(-tmpl,-tmph)--cycle;
    p:=(0,0)--(tmpx,0)--(tmpx,-tmph)--(0,-tmph)--cycle;
    for i:=-2.5 step 2 until 2:
      fill p shifted (i * tmpx,0);
    endfor;
    begingroup
      interim labeloffset:=3.5bp;
      for i:=0 step (l/5) until (l-1):
        tmpx:=tmpl * (i * 2 / l - 1);
        label.bot(thTEX(decimal (i)),(tmpx,-tmph));
      endfor;
      label.bot(thTEX(decimal (l) & "\thinspace" & txt),(tmpl,-tmph));
      label.top(thTEX("Scale 1 : " & decimal round(Scale*100)),(0,0));
    endgroup;
  enddef;

def p_u_fault (expr pos,theta,sc,al) =
    T:=identity aligned al rotated theta scaled sc shifted pos;
    pickup PenC;
    thdraw (0,-0.3u)--(0,0.3u) withcolor 0.8black;
	pickup PenD;
	thdraw (0.1u, 0) -- (-0.1u, 0) withcolor 0.8black;
enddef;

endcode

endlayout

# Changes the legend descriptions
text en "line u:dripline" "dripline"
text en "line u:wallchimney" "dome"
text en "line section" ""
text en "point altitude" "elevation ASL"
text en "point clay" ""
text en "area clay" ""
text en "point curtains" ""
text en "line border:visible" ""
text en "point u:blocks" ""
text en "point gradient" "slope"
text en "line slope" ""
text en "line rock-edge" ""
text en "line wall:clay" "Mud wall"
text en "line ceiling-meander" ""
text en "point low-end" "too low"
text en "point narrow-end" "too tight"
text en "point pebbles" "pebbles and cobbles"
text en "point vegetable-debris" "vegetative debris"
text en "line ceiling-step" "ceiling height change"
text en "point anchor" "bolted anchor"
text en "point u:fault" "vertical fault"
text en "area debris" "debris"
